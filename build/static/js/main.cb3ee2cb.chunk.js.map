{"version":3,"sources":["Component/footer.js","Component/header.js","Component/form.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Header","Form","props","fetchData","console","log","state","methodtemp","urltemp","fetch","headers","then","res","a","obj","entries","key","value","json","resJson","setState","responseJson","Headers","Response","handleClickGO","e","preventDefault","_method","url","handleInputmethod","method","target","handleInput","onSubmit","this","onChange","type","id","htmlFor","className","name","React","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb3ee2cb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../footer.scss';\r\n\r\nexport default function Footer() {\r\n\r\n    return <footer><h3>@ 2018 Code Fellows</h3></footer>\r\n  }\r\n  ","import React from \"react\";\r\nimport '../header.scss';\r\n\r\nexport default function Header() {\r\n\r\n    return <header><h1>RESTy</h1></header> \r\n }\r\n  ","import JSONPretty from 'react-json-prettify';\r\nimport React from \"react\";\r\nimport '../form.scss';\r\n\r\n\r\n\r\nexport default class Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // init state\r\n        this.state = {\r\n            urltemp: '',\r\n            methodtemp: '',\r\n            url: '',\r\n            _method: '',\r\n            responseJson: {},\r\n        }\r\n\r\n\r\n    }\r\n    fetchData = () => {\r\n        console.log(\"fetch\", this.state.methodtemp, this.state.urltemp);\r\n        fetch(this.state.urltemp, {\r\n            methodtemp: this.state.methodtemp || \"get\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        })\r\n            .then(async (res) => {\r\n                const obj = {};\r\n                for (let [key, value] of res.headers.entries()) {\r\n                    obj[key] = value;\r\n                }\r\n                const resJson = await res.json();\r\n                this.setState({ responseJson: { Headers: obj, Response: resJson } });\r\n            })\r\n    }\r\n\r\n    handleClickGO = e => {\r\n        e.preventDefault();\r\n        console.log(\"before\", this.state);\r\n        this.setState({ _method: this.state.methodtemp });\r\n        this.setState({ url: this.state.urltemp });\r\n        console.log(\"after\", this.state);\r\n        this.fetchData();\r\n\r\n    }\r\n\r\n    handleInputmethod = e => {\r\n        let method = e.target.value;\r\n        console.log('method : ', method)\r\n        this.setState({ methodtemp: method });\r\n    }\r\n\r\n    handleInput = e => {\r\n\r\n        let url = e.target.value;\r\n        console.log('url : ', url)\r\n        this.setState({ urltemp: url }); // re-render \r\n    }\r\n\r\n    render() {\r\n        return (<div><form onSubmit={this.handleClickGO}>\r\n            <label>URL <input onChange={this.handleInput} /></label>\r\n            <button type=\"submit\" >GO</button>\r\n            <br />\r\n            <label id=\"label\" htmlFor=\"get\"> <input onChange={this.handleInputmethod} className='radio-in' type=\"radio\" id=\"get\" name=\"btnselect\"\r\n                value=\"get\" />GET</label>\r\n            <label id=\"label\" htmlFor=\"post\"> <input onChange={this.handleInputmethod} className='radio-in' type=\"radio\" id=\"post\" name=\"btnselect\"\r\n                value=\"post\" />POST</label>\r\n            <label id=\"label\" htmlFor=\"put\"> <input onChange={this.handleInputmethod} className='radio-in' type=\"radio\" id=\"put\" name=\"btnselect\"\r\n                value=\"put\" />PUT</label>\r\n            <label id=\"label\" htmlFor=\"delete\"> <input onChange={this.handleInputmethod} className='radio-in' type=\"radio\" id=\"delete\" name=\"btnselect\"\r\n                value=\"delete\" />DELETE</label>\r\n\r\n\r\n        </form>\r\n            <section>\r\n                <h3>{this.state._method} {this.state.url}</h3>\r\n                <JSONPretty json={this.state.responseJson} />\r\n            </section>\r\n        </div>\r\n\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport './reset.scss';\n\nimport Footer from './Component/footer'\nimport Header from './Component/header'\nimport Form from './Component/form'\n\n\nclass App extends React.Component {\n        render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Form />\n        <Footer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}